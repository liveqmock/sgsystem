<?xml version="1.0" encoding="UTF-8"?>

<ehcache>
	
	<!-- 
		不同版本属性不一样
	
		maxElementsInMemory=“10000” //Cache中最多允许保存的数据对象的数量
		external=“false” //缓存中对象是否为永久的，如果是，超时设置将被忽略，对象从不过期 
		timeToIdleSeconds=“1000”  //缓存数据钝化时间(设置对象在它过期之前的空闲时间)  
		timeToLiveSeconds=“1000”  //缓存数据的生存时间(设置对象在它过期之前的生存时间)
		overflowToDisk=“false” />    //内存不足时，是否启用磁盘缓存  
		memoryStoreEvictionPolicy="LRU" //内存不足时数据对象的清除策略
		ehcache中缓存的3种清空策略：
		 FIFO(first in first out):先进先出
		 LFU( Less Frequently Used):一直以来最少被使用的。如上面所讲，缓存的元素有一个hit属性，hit值最小的将会被清出缓存。
		 LRU(Least Recently Used):最近最少使用的，缓存的元素有一个时间戳，当缓存容量满了，而又需要腾出地方来缓存新的元素的时候，
		 那么现有缓存元素中时间戳离当前时间最远的元素将被清出缓存。
		 
		 diskPersistent：是否disk store在虚拟机启动时持久化。默认为false
   		diskExpiryThreadIntervalSeconds:运行disk终结线程的时间，默认为120秒
 	-->
	 <diskStore path="java.io.tmpdir"/>
	 <defaultCache
            maxElementsInMemory="10000"
            eternal="false"
            timeToIdleSeconds="120"
            timeToLiveSeconds="120"
            overflowToDisk="true"
            diskPersistent="false"
            diskExpiryThreadIntervalSeconds="120"
            memoryStoreEvictionPolicy="LRU"
            />


</ehcache>
