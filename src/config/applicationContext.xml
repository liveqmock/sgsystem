<?xml version="1.0" encoding="UTF-8"?>
<beans
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd "
	 >
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:config/dbcp.properties</value>
			</list>
		</property>
	</bean>
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<!-- Connection Info -->
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />

		<!-- Connection Pooling Info -->
		<property name="maxActive" value="${dbcp.maxActive}" />
		<property name="maxIdle" value="${dbcp.maxIdle}" />
		<property name="defaultAutoCommit" value="false" />
		<property name="timeBetweenEvictionRunsMillis" value="3600000"/>
		<property name="minEvictableIdleTimeMillis" value="3600000"/>
	</bean>
	<bean id="sessionFactory" class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
		
		<property name="dataSource">
			<ref bean="dataSource" />
		</property>
		<property name="hibernateProperties">
			<value>
				hibernate.dialect=org.hibernate.dialect.MySQLInnoDBDialect
				hibernate.show_sql=true
				hibernate.format_sql=false
				<!-- hibernate.jdbc.fetch_size=50 (oracle支持)-->
				<!-- 启用二级缓存 -->
				<!-- hibernate.cache.use_second_level_cache=true -->
				<!-- 启用查询缓存 -->
				<!-- hibernate.cache.use_query_cache=true -->
				<!-- 指定cache实现类 -->
				<!-- hibernate.cache.provider_class=org.hibernate.cache.EhCacheProvider -->
				<!-- 指定ehcache配置文件 -->
				<!-- hibernate.cache.provider_configuration_file_resource_path=config/ehcache.xml -->
			</value>
		</property>
	
		<property name="mappingDirectoryLocations">
			<list>
				<value>classpath:com/jxoa/manager</value>
			</list>			
		</property>
		</bean>
	
	
	<bean id="hibernateTemplate" class="org.springframework.orm.hibernate3.HibernateTemplate">
		<property name="sessionFactory" ref="sessionFactory"></property>
		<!-- 开启缓存 如果不在此处写，需要在代码里面开启 HibernateTemplate().setCacheQueries(true);-->
		<!--  <property name="cacheQueries" value="true"></property>-->
		
	</bean>
	<!-- Servlet 工具  -->
	<bean id="servletUtil" class="com.jxoa.commons.util.ServletUtil" ></bean>
	
	<!-- 自定义初始化加载的一些信息  -->
	<bean id="baseConfig" class="com.jxoa.commons.config.BaseConfig" init-method="load" >
	<property name="devId" value="402881f73e1c4ba4013e1c4c08470001"></property>
		<property name="saId" value="402881f73e1c4ba4013e1c4c08470001"></property>
	</bean>
	<!-- 初始化自定义缓存 -->
	<bean id="myCache" class="com.jxoa.commons.cache.MyCache" init-method="load" ></bean>
	
	
	
	<!-- 自动扫描组件，这里要把controler下面的 controller去除，他们是在spring3-servlet.xml中配置的，如果不去除会影响事务管理的。   -->
	 <context:component-scan base-package="com.jxoa">
	      <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" /> 
	 </context:component-scan>
	
	<!-- transaction manager, use DataSourceTransactionManager -->
	<bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
 
	 <!-- spring declarative transaction management -->
	<aop:config>
		<aop:pointcut id="serviceMethods" expression="execution(* com.jxoa.manager.*.service.impl.*.*(..))"/> 
		<aop:advisor advice-ref="txAdvice" pointcut-ref="serviceMethods"/> 
	</aop:config>
	
	<aop:config>
		<aop:pointcut id="serviceMethods4" expression="execution(* com.jxoa.android.*.service.impl.*.*(..))"/> 
		<aop:advisor advice-ref="txAdvice" pointcut-ref="serviceMethods4"/> 
	</aop:config>
	
	<aop:config>
		<aop:pointcut id="serviceMethods2" expression="execution(* com.jxoa.commons.base.BaseServiceImpl.*(..))"/> 
		<aop:advisor advice-ref="txAdvice" pointcut-ref="serviceMethods2"/> 
	</aop:config>
	<aop:config>
		<aop:pointcut id="serviceMethods3" expression="execution(* com.jxoa.test.service.impl.*.*(..))"/> 
		<aop:advisor advice-ref="txAdvice" pointcut-ref="serviceMethods3"/> 
	</aop:config>
	
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		 <tx:attributes>
			 <tx:method name="add*"  propagation="REQUIRED" rollback-for="Exception"/>  
      		 <tx:method name="save*" propagation="REQUIRED" rollback-for="Exception"/>
       		 <tx:method name="del*" propagation="REQUIRED" rollback-for="Exception"/>  
        	 <tx:method name="update*" propagation="REQUIRED" rollback-for="Exception"/>  
        	 <tx:method name="*"  read-only="true"/>  
		</tx:attributes>
	</tx:advice>
	
	
	
	<!-- 验证码 -->
	 <bean id="captchaProducer" class="com.google.code.kaptcha.impl.DefaultKaptcha">
	        <property name="config">
	                <bean class="com.google.code.kaptcha.util.Config">
					        <!--通过构造函数注入属性值 -->
	                        <constructor-arg type="java.util.Properties">
	                                <props>
	                                    <!-- 验证码宽度 -->
                                        <!-- <prop key="kaptcha.image.width">100</prop>  -->
                                        <!-- 验证码高度 -->
                                       <!--   <prop key="kaptcha.image.height">105</prop>    -->
                                        <!-- 生成验证码内容范围 -->
                                        <!-- <prop key="kaptcha.textproducer.char.string">0123456789</prop> -->
                                        <!-- 验证码个数 -->
                                        <prop key="kaptcha.textproducer.char.length">4</prop>
                                        <!-- 是否有边框 -->
                                        <!-- <prop key="kaptcha.border">yes</prop> -->
                                        <!-- 边框颜色 -->
                                        <!-- <prop key="kaptcha.border.color">105,179,90</prop> -->
                                        <!-- 边框厚度 -->
                                       <!--  <prop key="kaptcha.border.thickness">1</prop> -->
                                        <!-- 验证码字体颜色 -->
                                       <!--  <prop key="kaptcha.textproducer.font.color">black</prop> -->
                                        <!-- 验证码字体大小 -->
                                        <prop key="kaptcha.textproducer.font.size">36</prop>
                                        <!-- 验证码所属字体样式 -->
                                       <!--  <prop key="kaptcha.textproducer.font.names">BKamrnBd</prop> -->
                                         <!-- 干扰线颜色 -->
                                       <!--  <prop key="kaptcha.noise.color">blue</prop> -->
                                        <!-- 验证码文本字符间距 -->
                                        <prop key="kaptcha.textproducer.char.space">6</prop>  
                                    
                                    </props>
	                        </constructor-arg>
	                </bean>
	        </property>
	 </bean>
	
	
 <!-- 定时任务 开始 -->
 	<!-- ======================== 数据库备份 配置方法 ======================== -->  
	<!-- 执行的类 -->
	<bean id="backupDatabaseJob" class="com.jxoa.commons.job.TimingBackupDatabase"/> 
	<!-- 配置定时器 -->
	<bean id="backupJobDetail" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject">
			<!-- 定时执行的类 -->
			<ref bean="backupDatabaseJob" />
		</property>
		<property name="targetMethod">
			<!-- 定时执行的类方法 -->
			<value>backupDatabase</value>
		</property>
	</bean>
	
	<!-- 配置 执行时间 -->  
		
	<bean id="cronTriggerBean1" class="org.springframework.scheduling.quartz.CronTriggerBean">  
  		 <property name="jobDetail" ref="backupJobDetail"></property>  
   		<!--  <property name="cronExpression" value="0 0 2 * * ?"></property> -->
   		 
   		 <property name="cronExpression" value="0 0 2 * * ?"></property>
   		 
	</bean> 
 
 
 
	<!-- 执行的类 -->
	<!--  <bean id="tm" class="com.jxoa.commons.util.TimeUtil" />-->
	<!-- ======================== 积分 配置方法 ======================== -->
<!--	<bean id="Time"-->
<!--		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">-->
<!--		<property name="targetObject">-->
<!--			 定时执行的类 -->
<!--			<ref bean="tm" />-->
<!--		</property>-->
<!--		<property name="targetMethod">-->
<!--			 定时执行的类方法 -->
<!--			<value>addMonth</value>-->
<!--		</property>-->
<!--	</bean>
	<bean id="timeYear"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject">
			<ref bean="tm" />
		</property>
		<property name="targetMethod">
			 定时执行的类方法 
			<value>addYear</value>
		</property>
	</bean>
-->
	<!-- ========================积分 定时器触发器 ======================== -->

<!--	<bean id="CronTriggerBean1" class="org.springframework.scheduling.quartz.CronTriggerBean">-->
<!--		<property name="jobDetail" ref="Time"></property>-->
<!--		<property name="cronExpression" value="10 10 23 L * ?"></property>-->
<!--		<property name="cronExpression" value="30 09 11 * * ?"></property>-->
<!--		-->
<!--	</bean>
	<bean id="CronTriggerBean2" class="org.springframework.scheduling.quartz.CronTriggerBean">
		<property name="jobDetail" ref="timeYear"></property>
		<property name="cronExpression" value="00 00 01 L 12 ? 2013-2050"></property>
		<property name="cronExpression" value="30 56 11 * * ?"></property>
		
	</bean>
	
	<bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">       
		<property name="triggers">
			<list>
				<ref local="cronTriggerBean1" />
				<ref local="CronTriggerBean2" />
			</list>
		</property>
	</bean>
-->
	<!-- 定时任务 结束 -->
	
	
	

</beans>